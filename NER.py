# -*- coding: utf-8 -*-
"""Untitled48.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1muyajg1T5mwXc4aXHkx6t5sHqMYXLKHJ
"""

import pandas as pd
import spacy
from nlpaug.augmenter.word import WordAugmenter
import random
import torch

# Load the CSV file containing text examples
df = pd.read_csv("/content/transaction_data _ner.csv")

# Load the pre-trained spaCy model for English NER
nlp = spacy.load("en_core_web_sm")

# Load the trained NLU model
nlu_model = torch.load("/content/nlu_model.h5")

# Initialize WordAugmenter for synonym replacement
aug = WordAugmenter(action='substitute')

# Function to extract entities using spaCy's NER model
def extract_entities(text):
    doc = nlp(text)
    entities = []
    for ent in doc.ents:
        if ent.label_ == "CARDINAL":
            entities.append((ent.start_char, ent.end_char, "AssetNumber"))
        elif ent.label_ == "GPE" or ent.label_ == "ORG":
            if "Location" in text:
                if "from" in text:
                    entities.append((ent.start_char, ent.end_char, "LocationFrom"))
                elif "to" in text:
                    entities.append((ent.start_char, ent.end_char, "LocationTo"))
            else:
                entities.append((ent.start_char, ent.end_char, "ReceiveLocation"))
        elif ent.label_ == "PERSON":
            entities.append((ent.start_char, ent.end_char, "Person"))
    return entities

# Function to perform data augmentation
def augment_text(text):
    augmented_text = aug.augment(text)
    return augmented_text

# Predict labels and annotate data
annotated_data = []
for text in df['text']:
    # Augment text
    augmented_text = augment_text(text)

    # Extract entities from augmented text
    entities = extract_entities(augmented_text)

    # Predict label for original text
    label = nlu_model.predict(text)

    # Append original and augmented data to annotated_data
    annotated_data.append((text, label, {'entities': entities}))
    annotated_data.append((augmented_text, label, {'entities': entities}))

# Save the trained spaCy model
nlp.to_disk("path_to_saved_spacy_model")

