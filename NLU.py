# -*- coding: utf-8 -*-
"""Untitled47.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eAzXegP9MUv-4nFJa03YHs2lN9GAbPOA
"""

import pandas as pd
import torch
from transformers import BertTokenizer, BertForSequenceClassification
from torch.utils.data import DataLoader, Dataset
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from transformers import AdamW
from tqdm import tqdm
import nltk
from nltk.corpus import wordnet
import random

# Download NLTK resources
nltk.download('wordnet')

# Read data from CSV file
df = pd.read_csv("/content/transaction_data.csv")  # Replace "your_dataset.csv" with the path to your CSV file

# Preparing data
train_df, val_df = train_test_split(df, test_size=0.2, stratify=df['label'], random_state=42)

# Data augmentation with synonym replacement
def synonym_replacement(sentence, n=2):
    words = sentence.split()
    new_words = words.copy()
    random_word_list = list(set([word for word in words if word != ""]))

    for _ in range(n):
        random_word = random.choice(random_word_list)
        synonyms = wordnet.synsets(random_word)
        if len(synonyms) > 0:
            synonym = random.choice(synonyms).lemmas()[0].name()
            new_words = [synonym if word == random_word else word for word in new_words]

    return ' '.join(new_words)

class CustomDataset(Dataset):
    def __init__(self, df, tokenizer, max_len, augment=True):
        self.df = df
        self.tokenizer = tokenizer
        self.max_len = max_len
        self.augment = augment

    def __len__(self):
        return len(self.df)

    def __getitem__(self, idx):
        text = self.df.iloc[idx]['text']
        label = self.df.iloc[idx]['label']

        if self.augment:
            # Apply data augmentation
            text = synonym_replacement(text)

        inputs = self.tokenizer.encode_plus(
            text,
            None,
            add_special_tokens=True,
            max_length=self.max_len,
            padding="max_length",
            truncation=True,
            return_token_type_ids=False,
            return_attention_mask=True,
            return_tensors="pt",
        )

        return {
            "input_ids": inputs["input_ids"].flatten(),
            "attention_mask": inputs["attention_mask"].flatten(),
            "label": torch.tensor(label, dtype=torch.long),
        }

# Initialize tokenizer and model
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=3)  # Change num_labels according to your number of classes

# Prepare DataLoader
train_dataset = CustomDataset(train_df, tokenizer, max_len=128, augment=True)  # Enable data augmentation for training data
val_dataset = CustomDataset(val_df, tokenizer, max_len=128, augment=False)  # Disable data augmentation for validation data
train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=8, shuffle=False)

# Training
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)
optimizer = AdamW(model.parameters(), lr=2e-5)

num_epochs = 10  # Adjust number of epochs
best_val_accuracy = 0.0

label_mapping = {0: 'asset move', 1: 'asset receive', 2: 'asset adjust'}

for epoch in range(num_epochs):
    model.train()
    train_loss = 0.0
    for batch in tqdm(train_loader, desc=f"Epoch {epoch+1}/{num_epochs}", unit="batch"):
        input_ids = batch["input_ids"].to(device)
        attention_mask = batch["attention_mask"].to(device)
        labels = batch["label"].to(device)

        optimizer.zero_grad()
        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        loss.backward()
        optimizer.step()
        train_loss += loss.item()

    model.eval()
    val_preds = []
    val_labels = []
    with torch.no_grad():
        for batch in val_loader:
            input_ids = batch["input_ids"].to(device)
            attention_mask = batch["attention_mask"].to(device)
            labels = batch["label"].to(device)

            outputs = model(input_ids, attention_mask=attention_mask)
            logits = outputs.logits
            preds = torch.argmax(logits, axis=1)
            val_preds.extend(preds.cpu().numpy())
            val_labels.extend(labels.cpu().numpy())

    val_preds_mapped = [label_mapping[pred] for pred in val_preds]
    val_labels_mapped = [label_mapping[label] for label in val_labels]

    val_accuracy = accuracy_score(val_labels_mapped, val_preds_mapped)
    print(f"Epoch {epoch + 1}/{num_epochs}, Training Loss: {train_loss / len(train_loader)}, Validation Accuracy: {val_accuracy}")

    if val_accuracy > best_val_accuracy:
        best_val_accuracy = val_accuracy
        # Save the model in HDF5 format
        torch.save(model, "/content/nlu_model.h5")